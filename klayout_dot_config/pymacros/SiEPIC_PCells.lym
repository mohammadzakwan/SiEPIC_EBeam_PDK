<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_PCells

"""
This file is part of the SiEPIC_PDK
by Lukas Chrostowski (c) 2015

This Python file implements a library called "SiEPIC", description "SiEPIC General" 


*******
PCells:
*******

1) Lumerical INTERCONNECT laser and detector
class LumericalINTERCONNECT_Laser
class LumericalINTERCONNECT_Detector


Also includes additional functions:

1) code for waveguide bends:
def layout_waveguide_abs(cell, layer, points, w, radius):
def layout_waveguide_rel(cell, layer, start_point, points, w, radius):

2) function for making polygon text
def layout_pgtext(cell, layer, x, y, text, mag):

3) functions for inspecting PCell parameters
def PCell_get_parameter_list ( cell_name, library_name ):
def PCell_get_parameters ( pcell ):



NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.

Version history:

Lukas Chrostowski           2015/11/05 - 2015/11/10
 - Double-bus ring resonator
 - waveguide bends
 - PCell parameter functions
 - polygon text
 - PCell calling another PCell - TestStruct_DoubleBus_Ring

Lukas Chrostowski           2015/11/14
 - fix for rounding error in "DoubleBus_Ring"

Lukas Chrostowski           2015/11/15
 - fix for Python 3.4: print("xxx")
 
Lukas Chrostowski           2015/11/17
 - update "layout_waveguide_rel" to use the calculated points_per_circle(radius)

Lukas Chrostowski           2015/11/19
 - Lumerical INTERCONNECT laser, detector

Lukas Chrostowski           2015/11/xx
 - Waveguide based on bends, straight waveguide.

Lukas Chrostowski           2015/12/3
 - Bragg grating

Lukas Chrostowski           2016/01/17
 - Taper, matching EBeam CML component
 
Lukas Chrostowski           2016/01/20
 - (sinusoidal) Bragg grating

Lukas Chrostowski           2016/04/19
 - Support for TM polarization in Netlist and laser
 
Lukas Chrostowski           2016/05/27
 - SWG_waveguide
 - SWG_to_strip_waveguide

Lukas Chrostowski           2016/06/11
 - spiral

S. Preble                   2016/08/26
 - Double Bus Ring Pin's shifted - text now is in the middle of the pin path

Lukas Chrostowski           2016/11/06
 - waveguide bump, to provide a tiny path length increase

Lukas Chrostowski           2016/11/06
 - adding capability to Ignore optical IOs in simulations: added as an option in the Laser.

Lukas Chrostowski           2017/02/14
 - renaming "SiEPIC" PCells library to "SiEPIC-EBeam PCells", update for Waveguide_Route
 - code simplifications: pya.Box -&gt; Box

Lukas Chrostowski           2017/02/14
 - moving device PCells into "SiEPIC-EBeam PCells" library; deleting here.
 

 
"""

import pya
import math

#import numpy as n
MODULE_NUMPY = False

dbu = 0.001

# Create aliases for KLayout Python API methods:
Box = pya.Box
Point = pya.Point
Polygon = pya.Polygon
Text = pya.Text
Trans = pya.Trans
LayerInfo = pya.LayerInfo





class waveguide_bump(pya.PCellDeclarationHelper):
  """
  Input: 
  """


  def __init__(self):


    # Important: initialize the super class
    super(waveguide_bump, self).__init__()


    # declare the parameters
    self.param("length", self.TypeDouble, "Regular Waveguide length", default = 10.0)     
# Ideally we would just specify the delta, and the function would solve the transcendental equation.
#    self.param("delta_length", self.TypeDouble, "Extra Waveguide length", default = 10.0)    
# for now, let the user specify the unknown theta 
    self.param("theta", self.TypeDouble, "Waveguide angle (degrees)", default = 5)     
    self.param("wg_width", self.TypeDouble, "Waveguide width (microns)", default = 0.5)     
    self.param("layer", self.TypeLayer, "Layer", default = LayerInfo(1, 0))
    self.param("pinrec", self.TypeLayer, "PinRec Layer", default = LayerInfo(69, 0))
    self.param("devrec", self.TypeLayer, "DevRec Layer", default = LayerInfo(68, 0))


  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "waveguide_bump_%s-%.3f" % \
    (self.length, self.wg_width)
  
  def coerce_parameters_impl(self):
    pass


  def can_create_from_shape(self, layout, shape, layer):
    return False
    
  def produce_impl(self):
  
    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes


    LayerSi = self.layer
    LayerSiN = ly.layer(LayerSi)
    LayerSiSPN = ly.layer(LayerSiSP)
    LayerPinRecN = ly.layer(self.pinrec)
    LayerDevRecN = ly.layer(self.devrec)
    LayerTextN = ly.layer(LayerText)


    from math import pi, cos, sin, log, sqrt
    
    x = 0
    y = 0
    theta = self.theta
    length = self.length
#    2*pi*r*(4*theta/360) = length + self.delta_length
    w = self.wg_width
    r = length/4/sin(theta/180.0*pi)
    waveguide_length = 2*pi*r*(4*theta/360.0)
    layout_arc_wg_dbu(self.cell, LayerSiN, (x)/dbu, (y+r)/dbu, r/dbu, w/dbu, 270, 270+theta)
    layout_arc_wg_dbu(self.cell, LayerSiN, (x+length/2)/dbu, (y-r+ 2*r*(1-cos(theta/180.0*pi)))/dbu, r/dbu, w/dbu, 90-theta, 90+theta)
    layout_arc_wg_dbu(self.cell, LayerSiN, (x+length)/dbu, (y+r)/dbu, r/dbu, w/dbu, 270-theta, 270)




    # Pins on the waveguide:
    pin_length = 200
    x = self.length / dbu
    w = self.wg_width / dbu
    t = Trans(x,0)
    pin = pya.Path([Point(-pin_length/2,0), Point(pin_length/2,0)], w)
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin2", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu


    x = 0
    t = Trans(x,0)
    pin = pya.Path([Point(-pin_length/2,0), Point(pin_length/2,0)], w)
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin1", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu


    # Compact model information
    t = Trans(0, 0)
    text = Text ('Lumerical_INTERCONNECT_library=Design kits/ebeam_v1.2', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu
    t = Trans(0, w*2)
    text = Text ('Lumerical_INTERCONNECT_component=ebeam_wg_integral_1550', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu
    t = Trans(0, -w*2)
    text = Text \
      ('Spice_param:wg_length=%.3fu wg_width=%.3fu' %\
      (waveguide_length, self.wg_width), t )
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu

    t = Trans(self.length / dbu /6, -w*2)
    text = Text ('dL = %.4f um' % ((waveguide_length-length)), t)
    shape = shapes(LayerTextN).insert(text)
    shape.text_size = 0.6/dbu

    # Create the device recognition layer -- make it 1 * wg_width away from the waveguides.
    box1 = Box(0, -w*3, length/dbu, w*3+(2*r*(1-cos(theta/180.0*pi)))/dbu)
    shapes(LayerDevRecN).insert(box1)



def layout_waveguide_abs(cell, layer, points, w, radius):
    # create a path, then convert to a polygon waveguide with bends
    # cell: cell into which to place the waveguide
    # layer: layer to draw on
    # points: array of vertices, absolute coordinates on the current cell
    # w: waveguide width
    
    # example usage:
    # cell = pya.Application.instance().main_window().current_view().active_cellview().cell
    # LayerSi = LayerInfo(1, 0)
    # points = [ [15, 2.75], [30, 2.75] ]  # units of microns.
    # layout_waveguide_abs(cell, LayerSi, points, 0.5, 10)

    if MODULE_NUMPY:  
      # numpy version
      points=n.array(points)  
      start_point=points[0]
      points = points - start_point  
    else:  
      # without numpy:
      start_point=[]
      start_point.append(points[0][0])
      start_point.append(points[0][1]) 
      for i in range(0,2):
        for j in range(0,len(points)):
          points[j][i] -= start_point[i]
    
    layout_waveguide_rel(cell, layer, start_point, points, w, radius)


def layout_waveguide_rel(cell, layer, start_point, points, w, radius):
    # create a path, then convert to a polygon waveguide with bends
    # cell: cell into which to place the waveguide
    # layer: layer to draw on
    # start_point: starting vertex for the waveguide
    # points: array of vertices, relative to start_point
    # w: waveguide width
    
    # example usage:
    # cell = pya.Application.instance().main_window().current_view().active_cellview().cell
    # LayerSi = LayerInfo(1, 0)
    # points = [ [15, 2.75], [30, 2.75] ]  # units of microns.
    # layout_waveguide_rel(cell, LayerSi, [0,0], points, 0.5, 10)

    
    print("* layout_waveguide_rel(%s, %s, %s, %s)" % (cell.name, layer, w, radius) )

    ly = cell.layout() 
    dbu = cell.layout().dbu

    start_point=[start_point[0]/dbu, start_point[1]/dbu]

    a1 = []
    for p in points:
      a1.append (pya.DPoint(float(p[0]), float(p[1])))
  
    wg_path = pya.DPath(a1, w)

    npoints = points_per_circle(radius)
    param = { "npoints": npoints, "radius": float(radius), "path": wg_path, "layer": layer }

    pcell = ly.create_cell("ROUND_PATH", "Basic", param )

    # Configure the cell location
    trans = Trans(Point(start_point[0], start_point[1]))

    # Place the PCell
    cell.insert(pya.CellInstArray(pcell.cell_index(), trans))




def layout_pgtext(cell, layer, x, y, text, mag):
    # example usage:
    # cell = pya.Application.instance().main_window().current_view().active_cellview().cell
    # layout_pgtext(cell, LayerInfo(10, 0), 0, 0, "test", 1)

    # for the Text polygon:
    textlib = pya.Library.library_by_name("Basic")
    if textlib == None:
      raise Exception("Unknown lib 'Basic'")

    textpcell_decl = textlib.layout().pcell_declaration("TEXT");
    if textpcell_decl == None:
      raise Exception("Unknown PCell 'TEXT'")
    param = { 
      "text": text, 
      "layer": layer, 
      "mag": mag 
    }
    pv = []
    for p in textpcell_decl.get_parameters():
      if p.name in param:
        pv.append(param[p.name])
      else:
        pv.append(p.default)
    # "fake PCell code" 
    text_cell = cell.layout().create_cell("Temp_text_cell")
    textlayer_index = cell.layout().layer(layer)
    textpcell_decl.produce(cell.layout(), [ textlayer_index ], pv, text_cell)

    # fetch the database parameters
    dbu = cell.layout().dbu
    t = Trans(Trans.R0, x/dbu, y/dbu)
    cell.insert(pya.CellInstArray(text_cell.cell_index(), t))
    # flatten and delete polygon text cell
    cell.flatten(True)

    print("Done layout_pgtext")



def layout_arc_wg_dbu(cell, LayerSiN, x, y, r, w, theta_start, theta_stop):
  # function to draw an arc of waveguide
  # cell: layout cell to place the layout
  # LayerSiN: which layer to use
  # x, y: location of the origin
  # r: radius
  # w: waveguide width
  # length units in dbu
  # theta_start, theta_stop: angles for the arc
  # angles in degrees

  # example usage.  Places the ring layout in the presently selected cell.
  # cell = pya.Application.instance().main_window().current_view().active_cellview().cell
  # layout_Ring(cell, cell.layout().layer(LayerInfo(1, 0)), 0, 0, 10*1000, 0.5*1000, 0, 360)

  from math import pi, cos, sin

  dbu = cell.layout().dbu
  
  circle_fraction = abs(theta_stop-theta_start) / 360.0
  npoints = int(points_per_circle(r*dbu) * circle_fraction)
  da = 2 * pi / npoints * circle_fraction # increment, in radians
  pts = []
  th = theta_start / 360.0 * 2 * pi
  for i in range(0, npoints+1):
    pts.append(Point.from_dpoint(pya.DPoint((x+(r+w/2)*cos(i*da+th))/1, (y+(r+w/2)*sin(i*da+th))/1)))
  for i in range(npoints, -1, -1):
    pts.append(Point.from_dpoint(pya.DPoint((x+(r-w/2)*cos(i*da+th))/1, (y+(r-w/2)*sin(i*da+th))/1)))
  cell.shapes(LayerSiN).insert(Polygon(pts))


class LumericalINTERCONNECT_Laser(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the LumericalINTERCONNECT Optical Network Analyzer.
  This configures the swept tunable laser
  
  Ultimately want to generate Spice output such as:
  
  .ona input_unit=wavelength input_parameter=center_and_range center=1550e-9
  + range=100e-9 start=3 stop=4 number_of_points=1000 orthogonal_identifier=1
  + label=TE peak_analysis=disable number_of_peaks=8 peak_at_maximum=9
  + peak_threshold=0 peak_excursion=11 pit_excursion=12 fwhm_excursion=13
  + minimum_loss=14 sensitivity=-200 analysis_type=scattering_data
  + multithreading=automatic number_of_threads=1 input(1)=X_GC1,opt_fiber
  + output=X_GC2,opt_fiber

  
  """

  def __init__(self):

    # Important: initialize the super class
    super(LumericalINTERCONNECT_Laser, self).__init__()

    # declare the parameters
    self.param("wavelength_start", self.TypeDouble, "Start Wavelength (nm)", default = 1500)
    self.param("wavelength_stop", self.TypeDouble, "Stop Wavelength (nm)", default = 1600)
    self.param("npoints", self.TypeInt, "Number of points", default = 2000)     
    self.param("orthogonal_identifier", self.TypeInt, "Orthogonal identifier (1=TE, 2=TM)", default = 1)     
    self.param("ignoreOpticalIOs", self.TypeInt, "Ignore optical IOs in simulations (1=Ignore, 0=Include)", default = 0)
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))

  def can_create_from_shape_impl(self):
    return False
    
  def produce_impl(self):
    # This is the main part of the implementation: create the layout

    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes
       
    LayerINTERCONNECTN = ly.layer(LayerINTERCONNECT)
    TextLayerN = ly.layer(LayerText)

    # Draw the laser
    width = 60/dbu
    height = 40/dbu
    box1 = Box(-width/2, -height/2, width/2, height/2)
    shapes(LayerINTERCONNECTN).insert(box1)
#    shrink = 1000
#    box1 = Box(-width/2+shrink, -height/2+shrink, width/2-shrink, height/2-shrink)
#    shapes(LayerINTERCONNECTN).insert(box1)
        
    t = Trans(-width/2+3/dbu, height/2-4/dbu)
    text = Text ("Tunable Laser", t)
    shape = shapes(LayerINTERCONNECTN).insert(text)
    shape.text_size = 1.5/dbu

    t = Trans(-width/2+3/dbu, height/2-8/dbu)
    text = Text ("Wavelength range: %4.3f - %4.3f nm" % ( self.wavelength_start, self.wavelength_stop), t)
    shape = shapes(LayerINTERCONNECTN).insert(text)
    shape.text_size = 1.5/dbu

    t = Trans(-width/2+3/dbu, height/2-12/dbu)
    text = Text ("Number of points: %s" % ( self.npoints), t)
    shape = shapes(LayerINTERCONNECTN).insert(text)
    shape.text_size = 1.5/dbu

    t = Trans(-width/2+3/dbu, height/2-16/dbu)
    text = Text ("Ignore optical IOs in simulations: %s" % ( self.ignoreOpticalIOs), t)
    shape = shapes(LayerINTERCONNECTN).insert(text)
    shape.text_size = 1.5/dbu

    # Add a polygon text description
    fontsize = 2.2
    layout_pgtext(self.cell, LayerText, -width/2*dbu+3, -height/2*dbu+2, "Number of points: %s" % ( self.npoints), fontsize)
    layout_pgtext(self.cell, LayerText, -width/2*dbu+3, -height/2*dbu+5, "Wavelength range: %4.3f - %4.3f nm" % ( self.wavelength_start, self.wavelength_stop), fontsize)

    print("PCell produce_impl: laser")



class LumericalINTERCONNECT_Detector(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the LumericalINTERCONNECT Optical Network Analyzer.
  This configures the detector  
  """

  def __init__(self):

    # Important: initialize the super class
    super(LumericalINTERCONNECT_Detector, self).__init__()

    detector_number = 1
      
    # declare the parameters
    self.param("number", self.TypeInt, "Detector number", default = detector_number)     
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))

  def can_create_from_shape_impl(self):
    return False

  def coerce_parameters_impl(self):
    if 0:
      detector_number = self.number
      print("LumericalINTERCONNECT_Detector, original detector number: %s" % detector_number )
      # scan layout for other detectors, record their numbers
      detectors = []
      iter1 = topcell.begin_shapes_rec(LayerINTERCONNECTN)
      while not(iter1.at_end()):
        if iter1.shape().is_text():
          txt = iter1.shape().text.string
          if string.find(txt,"LumericalINTERCONNECT_Detector") &gt; -1:
            n = [int(s) for s in txt.split() if s.isdigit()]
            if len(n)&gt;0:
              detectors.append (n[0])
        advance_iterator(iter1)
      print("LumericalINTERCONNECT_Detector, listing of detector numbers: %s" % detectors )
      if detector_number in detectors:
        detector_number = 1
      while detector_number in detectors:
        detector_number += 1
      print("LumericalINTERCONNECT_Detector, new detector number: %s" % detector_number )
      self.number = detector_number
    else:
      pass
           
  def produce_impl(self):
    # This is the main part of the implementation: create the layout


    if 0:
      # choose a unique detector number
      layout = pya.Application.instance().main_window().current_view().active_cellview().layout() 
      if layout == None:
        raise Exception("No layout")
      lv = pya.Application.instance().main_window().current_view()
      if lv == None:
        raise Exception("No view selected")
      # find the currently selected cell:
      topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
      if topcell == None:
        raise Exception("No cell")
      # scan layout for other detectors, record their numbers
      detectors = []
      LayerINTERCONNECTN = layout.layer(LayerINTERCONNECT)
      iter1 = topcell.begin_shapes_rec(LayerINTERCONNECTN)
      while not(iter1.at_end()):
        if iter1.shape().is_text():
          txt = iter1.shape().text.string
          if string.find(txt,"LumericalINTERCONNECT_Detector") &gt; -1:
            n = [int(s) for s in txt.split() if s.isdigit()]
            if len(n)&gt;0:
              detectors.append (n[0])
        advance_iterator(iter1)
      print("LumericalINTERCONNECT_Detector, listing of detector numbers: %s" % detectors )
      detector_number = 1
      while detector_number in detectors:
        detector_number += 1
      print("LumericalINTERCONNECT_Detector, new detector number: %s" % detector_number )
    else:
      pass

    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes
       
    LayerINTERCONNECTN = ly.layer(LayerINTERCONNECT)
    TextLayerN = ly.layer(LayerText)

    # Draw the outline
    width = 60/dbu
    height = 40/dbu
    box1 = Box(-width/2, -height/2, width/2, height/2)
    shapes(LayerINTERCONNECTN).insert(box1)
#    shrink = 1000
#    box1 = Box(-width/2+shrink, -height/2+shrink, width/2-shrink, height/2-shrink)
#    shapes(LayerINTERCONNECTN).insert(box1)
        
    t = Trans(-width/2+3/dbu, height/2-4/dbu)
    text = Text ("Detector", t)
    shape = shapes(LayerINTERCONNECTN).insert(text)
    shape.text_size = 1.5/dbu

    t = Trans(-width/2+3/dbu, height/2-8/dbu)
    text = Text ("Detector Number: %s" % ( self.number), t)
    shape = shapes(LayerINTERCONNECTN).insert(text)
    shape.text_size = 1.5/dbu
    
    # Label to be used for Spice netlist, and for unique detector generation (coerce, above)
    t = Trans(0,0)
    text = Text ("LumericalINTERCONNECT_Detector %s" % ( self.number), t)
    shape = shapes(LayerINTERCONNECTN).insert(text)
    shape.text_size = 0.1/dbu

    # Add a polygon text description
    fontsize = 2.2
    layout_pgtext(self.cell, LayerText, -width/2*dbu+3, -height/2*dbu+2, "Number: %s" % ( self.number), fontsize)

    print("PCell produce_impl: detector")





class Waveguide_Route_simple(pya.PCellDeclarationHelper):
  """
  The PCell declaration for a waveguide route
  """

  def __init__(self):

    # Important: initialize the super class
    super(Waveguide_Route_simple, self).__init__()

    # declare the parameters
    self.param("layer", self.TypeLayer, "Layer", default = LayerInfo(1, 0))
    self.param("path", self.TypeShape, "", default = pya.DPath([pya.DPoint(0,0), pya.DPoint(10,0), pya.DPoint(10,10)], 0.5)  )
    self.param("radius", self.TypeDouble, "Radius", default = 5)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Waveguide_Route_simple_%s" % self.path
  
  def coerce_parameters_impl(self):
    pass

  def can_create_from_shape(self, layout, shape, layer):
    return shape.is_path()

  def transformation_from_shape(self, layout, shape, layer):
    return Trans(0,0)

  def parameters_from_shape(self, layout, shape, layer):
    self._param_values = []
    for pd in self._param_decls:
      self._param_values.append(pd.default)
    
    dbu = layout.dbu
    print("Waveguide_Route_simple.parameters_from_shape")
    print(shape.path)
    points = points_mult(path_to_Dpoints(shape.path), dbu)
    self.path = points_to_Dpath(points, shape.path.width*dbu)

    # Waveguide radius should be specified in the cell in which the Path_to_Waveguide is called
    # using a "User Properties" defined via the Cells window.
    # if missing, a dialog is presented.
    cell = shape.cell
    radius_str = cell.property("radius")  
    if radius_str:
      radius = float(radius_str)
      print("Radius taken from cell {%s} = %s" % (cell.name, radius) )
    else:
      radius = pya.InputDialog.ask_double_ex("Bend Radius", "Enter the bend radius (microns):", 5, 1, 500, 3)
      if radius == None:
        radius = 10.0
      else:
        print("Radius taken from the InputDialog = %s; for next time, saved in cell {%s}." % (radius, cell.name) )
        cell.set_property("radius", str(radius))
    self.radius = radius
    
    return self._param_values  
        
    
  def produce_impl(self):
  
    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout

    LayerSi = self.layer
    LayerSiN = ly.layer(LayerSi)

    print("Waveguide:")
    print(self.path)
#    points = points_mult(path_to_Dpoints(self.path), 1/dbu)  # convert from microns to dbu

    points = path_to_Dpoints(self.path) 
#    w = self.path.width/dbu   # w in dbu
#    path = points_to_path(points,w)

    layout_waveguide_abs(self.cell, self.layer, points, self.path.width, self.radius)
    
    

class Waveguide_Route(pya.PCellDeclarationHelper):
  """
  The PCell declaration for a waveguide route
  """

  def __init__(self):

    # Important: initialize the super class
    super(Waveguide_Route, self).__init__()

    # declare the parameters
    self.param("layer", self.TypeLayer, "Layer", default = LayerInfo(1, 0))
    self.param("path", self.TypeShape, "", default = pya.DPath([pya.DPoint(0,0), pya.DPoint(10,0), pya.DPoint(10,10)], 0.5)  )
    self.param("radius", self.TypeDouble, "Radius", default = 5)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Waveguide_Route_%s" % self.path
  
  def coerce_parameters_impl(self):
    pass

  def can_create_from_shape(self, layout, shape, layer):
    return shape.is_path()

  def transformation_from_shape(self, layout, shape, layer):
#    return Trans(shape.bbox().center())
    return Trans(0,0)

  def parameters_from_shape(self, layout, shape, layer):
    shapes = self.cell.shapes
    self._param_values = []
    for pd in self._param_decls:
      self._param_values.append(pd.default)
    
    dbu = layout.dbu
    print("Waveguide_Route.parameters_from_shape")
    print(shape.path)
    points = points_mult(path_to_Dpoints(shape.path), dbu)
    self.path = points_to_Dpath(points, shape.path.width*dbu)

    # Waveguide radius should be specified in the cell in which the Path_to_Waveguide is called
    # using a "User Properties" defined via the Cells window.
    # if missing, a dialog is presented.
    cell = shape.cell
    radius_str = cell.property("radius")  
    if radius_str:
      radius = float(radius_str)
      print("Radius taken from cell {%s} = %s" % (cell.name, radius) )
    else:
      radius = pya.InputDialog.ask_double_ex("Bend Radius", "Enter the bend radius (microns):", 5, 1, 500, 3)
      if radius == None:
        radius = 10.0
      else:
        print("Radius taken from the InputDialog = %s; for next time, saved in cell {%s}." % (radius, cell.name) )
        cell.set_property("radius", str(radius))
    self.radius = radius
    
    return self._param_values  
        
    
  def produce_impl(self):
  
    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout

    LayerSi = self.layer
    LayerSiN = ly.layer(LayerSi)

    print("Waveguide:")
    print(self.path)
    points = points_mult(path_to_Dpoints(self.path), 1/dbu)  # convert from microns to dbu
    
    # check the points to remove any co-linear points
    for i in range(len(points)-2, 0, -1):
      # if point i is colinear with its neighbours, remove it
      if check_point_in_segment(Point(*points[i-1]), Point(*points[i+1]), Point(*points[i])):
        # points.remove(i)
        pass
          
    w = self.path.width/dbu   # w in dbu
    path = points_to_path(points,w)

    # save the info on the bends we place.
    bends_pcell = []
    bends_instance = []
    
    for i in range(1,len(points)-1):
      # if point i is colinear with its neighbours, skip it
      if check_point_in_segment(Point(*points[i-1]), Point(*points[i+1]), Point(*points[i])):
        continue
        
      # Place Waveguide_Bend components at each corner:
      # determine rotation: +1 left, -1 right.
      rightvsleft_turn = ( ( angle_segments([points[i-1],points[i]], [points[i],points[i+1]])+90 ) % 360 - 90 ) / 90
      angle = ( angle_segment([points[i-1],points[i]]) ) / 90
      radius = self.radius
      seg_len = distance_xy ( points[i-1],points[i] )
      if (seg_len &lt; radius) and i==1:  # for the first bend, only 1 segment
        radius = seg_len
      if (seg_len / 2 &lt; radius) and i&gt;1:  # for the middle bends, split the segment into two
        radius = seg_len / 2
      seg_len = distance_xy ( points[i],points[i+1] )
      if (seg_len  &lt; radius) and i==len(points)-2:
        radius = seg_len 
      if (seg_len / 2 &lt; radius) and i&lt;len(points)-2:
        radius = seg_len / 2
      param = { "wg_width": self.path.width, "radius": radius, "silayer": LayerSi }
      pcell = ly.create_cell("Waveguide_Bend", "SiEPIC-EBeam PCells", param )
      trans = Trans(angle, True if rightvsleft_turn&lt;0 else False, Point(*points[i]))
      instance = self.cell.insert(pya.CellInstArray(pcell.cell_index(), trans))
      
#      PCell_get_parameters ( pcell )
      
      # Save info on bends
      bends_pcell.append ( pcell )
      bends_instance.append (instance)

    # Place the straight waveguide segments:
    for i in range(0,len(bends_instance)-1):

      # connect p2 of bend i with p1 of bend i+1

      # bend i+1, p2:
      pins = find_PCell_pins(bends_pcell[i])
      p2 = Point(pins['pin2_x'], pins['pin2_y'] )
#      p2 = bends_pcell[i].pcell_parameters_by_name()['p2'] # Point, within the PCell's coordinates
      p2t = bends_instance[i].trans.trans(p2) # Point, transformed based on PCell's instance tranformation

      # bend i, p1:
      pins = find_PCell_pins(bends_pcell[i+1])
      p1 = Point(pins['pin1_x'], pins['pin1_y'] )
#      p1 = bends_pcell[i+1].pcell_parameters_by_name()['p1'] 
      p1t = bends_instance[i+1].trans.trans(p1) 

      # find wg_length, and rotation
      angle = ( angle_segment([points[i+1],points[i+2]]) ) / 90
      wg_length = p2t.distance(p1t) # pya.Path([p2, p1], w).length()
      if wg_length &gt; 0:
        # place the waveguide:      
        param = { "wg_width": w, "wg_length": wg_length, "layer": LayerSi }
        pcell = ly.create_cell("Waveguide_Straight", "SiEPIC-EBeam PCells", param )
        p3 = Point ((p2t.x+p1t.x)/2, (p2t.y+p1t.y)/2) # midpoint of p2t p1t
        trans = Trans(angle, False, p3)
        self.cell.insert(pya.CellInstArray(pcell.cell_index(), trans))      
        print("straight wg mid-section inst: %s, %s, %s, [%s];   bend: %s, %s, p2 %s" % (i, angle, wg_length, p3, bends_instance[i], bends_pcell[i], p2) )

    # put in the straight segment at the beginning of the path
    if len(bends_pcell) &gt; 0:
      pins = find_PCell_pins(bends_pcell[0])
      p1 = Point(pins['pin1_x'], pins['pin1_y'] )
      p1t = bends_instance[0].trans.trans(p1) 
      p0 = Point(*points[0])
      angle = ( angle_segment([points[0],points[1]]) ) / 90
      wg_length = p0.distance(p1t) 
      if wg_length &gt; 0:
        # place the waveguide:      
        p3 = Point ((p0.x+p1t.x)/2, (p0.y+p1t.y)/2) # midpoint
        param = { "wg_width": w, "wg_length": wg_length, "layer": LayerSi }
        pcell = ly.create_cell("Waveguide_Straight", "SiEPIC-EBeam PCells", param )
        trans = Trans(angle, False, p3)
        self.cell.insert(pya.CellInstArray(pcell.cell_index(), trans))      
        print("straight wg end-section inst: %s, %s, %s, [%s]; " % (i, angle, wg_length, p3) )
        
      # put in the straight segment at the end of the path
      i=len(bends_instance)-2
      pins = find_PCell_pins(bends_pcell[i+1])
      p2 = Point(pins['pin2_x'], pins['pin2_y'] )
      p2t = bends_instance[i+1].trans.trans(p2) 
      p0 = Point(*points[i+3])
      angle = ( angle_segment([points[i+2],points[i+3]]) ) / 90
      wg_length = p0.distance(p2t) 
      if wg_length &gt; 0:
        # place the waveguide:      
        p3 = Point ((p0.x+p2t.x)/2, (p0.y+p2t.y)/2) # midpoint
        param = { "wg_width": w, "wg_length": wg_length, "layer": LayerSi }
        pcell = ly.create_cell("Waveguide_Straight", "SiEPIC-EBeam PCells", param )
        trans = Trans(angle, False, p3)
        self.cell.insert(pya.CellInstArray(pcell.cell_index(), trans))      
        print("straight wg end-section inst: %s, %s, %s, [%s]; " % (i, angle, wg_length, p3) )
    else:
      # just a straight section:
        p1 = Point(*points[0])
        p2 = Point(*points[len(points)-1])
        wg_length = p1.distance(p2) 
        angle = ( angle_segment([points[0],points[len(points)-1]]) ) / 90
        p3 = Point ((p1.x+p2.x)/2, (p1.y+p2.y)/2) # midpoint
        param = { "wg_width": w, "wg_length": wg_length, "layer": LayerSi }
        pcell = ly.create_cell("Waveguide_Straight", "SiEPIC-EBeam PCells", param )
        trans = Trans(angle, False, p3)
        self.cell.insert(pya.CellInstArray(pcell.cell_index(), trans))      
        print("straight wg end-section inst:  %s, %s, [%s]; " % (angle, wg_length, p3) )


class Waveguide_Bend(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the waveguide bend.
  """

  def __init__(self):

    # Important: initialize the super class
    super(Waveguide_Bend, self).__init__()

    # declare the parameters
    self.param("silayer", self.TypeLayer, "Si Layer", default = LayerInfo(1, 0))
    self.param("radius", self.TypeDouble, "Radius", default = 10)
    self.param("wg_width", self.TypeDouble, "Waveguide Width", default = 0.5)
    self.param("pinrec", self.TypeLayer, "PinRec Layer", default = LayerInfo(69, 0))
    self.param("devrec", self.TypeLayer, "DevRec Layer", default = LayerInfo(68, 0))
    # hidden parameters, can be used to query this component:
    self.param("p1", self.TypeShape, "DPoint location of pin1", default = Point(-10000, 0), hidden = True, readonly = True)
    self.param("p2", self.TypeShape, "DPoint location of pin2", default = Point(0, 10000), hidden = True, readonly = True)
    

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Waveguide_Bend(R=" + ('%.3f' % self.radius) + ")"

  def can_create_from_shape_impl(self):
    return False


  def produce(self, layout, layers, parameters, cell):
    """
    coerce parameters (make consistent)
    """
    self._layers = layers
    self.cell = cell
    self._param_values = parameters
    self.layout = layout


    # cell: layout cell to place the layout
    # LayerSiN: which layer to use
    # r: radius
    # w: waveguide width
    # length units in dbu

    from math import pi, cos, sin

    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes
    
    LayerSi = self.silayer
    LayerSiN = self.silayer_layer
#    LayerSiN = ly.layer(LayerSi)
    LayerPinRecN = ly.layer(self.pinrec)
    LayerDevRecN = ly.layer(self.devrec)
    
    w = int(round(self.wg_width/dbu))
    r = int(round(self.radius/dbu))

    # draw the quarter-circle
    x = -r
    y = r
    layout_arc_wg_dbu(self.cell, LayerSiN, x, y, r, w, 270, 360)
    
    # Create the pins, as short paths:
    pin_length = 200 # database units, = 0.2 microns
    
    # Pin on the top side:
    p2 = [Point(0, y+pin_length/2), Point(0, y-pin_length/2)]
    p2c = Point(0, y)
    self.set_p2 = p2c
    self.p2 = p2c
    pin = pya.Path(p2, w)
    shapes(LayerPinRecN).insert(pin)
    t = Trans(0, y)
    text = Text ("pin2", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    # Pin on the left side:
    p1 = [Point(pin_length/2+x,0), Point(-pin_length/2+x,0)]
    p1c = Point(x,0)
    self.set_p1 = p1c
    self.p1 = p1c
    pin = pya.Path(p1, w)
    shapes(LayerPinRecN).insert(pin)
    t = Trans(x, 0)
    text = Text ("pin1", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    # Create the device recognition layer -- make it 1 * wg_width away from the waveguides.
    layout_arc_wg_dbu(self.cell, LayerDevRecN, x, y, r, w*3, 270, 360)

    # Compact model information
    t = Trans(x+r/10, 0)
    text = Text ("Lumerical_INTERCONNECT_library=Design kits/ebeam_v1.2", t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = r/100
    t = Trans(x+r/10, r/4)
    text = Text ('Lumerical_INTERCONNECT_component=ebeam_bend_1550', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = r/100
    t = Trans(x+r/10, r/2)
    text = Text ('Spice_param:radius=%.3fu wg_width=%.3fu'% (self.radius,self.wg_width), t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = r/100

#    print("Done drawing the layout for - Waveguide_Bend: %.3f" % ( self.radius) )

  
#  def produce_impl(self):


class Waveguide_Straight(pya.PCellDeclarationHelper):
  """
  Input: length, width
  draws a straight waveguide with pins. centred at the instantiation point.
  Usage: instantiate, and use transformations (rotation)
  """

  def __init__(self):

    # Important: initialize the super class
    super(Waveguide_Straight, self).__init__()

    # declare the parameters
    self.param("wg_length", self.TypeInt, "Waveguide Length", default = 10000)     
    self.param("wg_width", self.TypeInt, "Waveguide width", default = 500)     
    self.param("layer", self.TypeLayer, "Layer", default = LayerInfo(1, 0))
    self.param("pinrec", self.TypeLayer, "PinRec Layer", default = LayerInfo(69, 0))
    self.param("devrec", self.TypeLayer, "DevRec Layer", default = LayerInfo(68, 0))
#    self.param("textl", self.TypeLayer, "Text Layer", default = LayerInfo(10, 0))

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Waveguide_Straight_%.3f-%.3f" % (self.wg_length/1000, self.wg_width/1000)
  
  def coerce_parameters_impl(self):
    pass

  def can_create_from_shape(self, layout, shape, layer):
    return False
    
  def produce_impl(self):
  
    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes

    LayerSi = self.layer
    LayerSiN = ly.layer(LayerSi)
    LayerPinRecN = ly.layer(self.pinrec)
    LayerDevRecN = ly.layer(self.devrec)

#    print("Waveguide_Straight:")
    w = self.wg_width
    length = self.wg_length
    points = [[-length/2,0], [length/2, 0]]
    path = points_to_path(points,w)
#    print(path)

    shapes(LayerSiN).insert(path.simple_polygon())
    
    # Pins on the bus waveguide side:
    pin_length = 200
    if length &lt; pin_length+1:
      pin_length = int(length/3)
      pin_length = math.ceil(pin_length / 2.) * 2
    if pin_length == 0:
      pin_length = 2

    t = Trans(-length/2,0)
    pin = pya.Path([Point(-pin_length/2, 0), Point(pin_length/2, 0)], w)
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin1", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    t = Trans(length/2,0)
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin2", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    # Compact model information
    t = Trans(0, 0)
    text = Text ('Lumerical_INTERCONNECT_library=Design kits/ebeam_v1.2', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu
    t = Trans(length/10, 0)
    text = Text ('Lumerical_INTERCONNECT_component=ebeam_wg_integral_1550', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu
    t = Trans(length/9, 0)
    text = Text ('Spice_param:wg_width=%.3fu wg_length=%.3fu'%(self.wg_width*dbu, self.wg_length*dbu), t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu

    # Create the device recognition layer -- make it 1 * wg_width away from the waveguides.
    path = points_to_path(points,w*3)
    shapes(LayerDevRecN).insert(path.simple_polygon())



class Waveguide_Straight2(pya.PCellDeclarationHelper):
  """
  Input: DPath with 2 points, units microns
  draws a straight waveguide with pins.
  """

  def __init__(self):

    # Important: initialize the super class
    super(Waveguide_Straight2, self).__init__()

    # declare the parameters
    self.param("layer", self.TypeLayer, "Layer", default = LayerInfo(1, 0))
    self.param("path", self.TypeShape, "", default = pya.DPath([pya.DPoint(0,0), pya.DPoint(10,0)], 0.5)  )
    self.param("pinrec", self.TypeLayer, "PinRec Layer", default = LayerInfo(69, 0))
    self.param("devrec", self.TypeLayer, "DevRec Layer", default = LayerInfo(68, 0))
#    self.param("textl", self.TypeLayer, "Text Layer", default = LayerInfo(10, 0))

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Waveguide_Straight2_%s" % self.path
  
  def coerce_parameters_impl(self):
    pass

  def can_create_from_shape(self, layout, shape, layer):
    return False
    
  def produce_impl(self):
  
    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes

    LayerSi = self.layer
    LayerSiN = ly.layer(LayerSi)
    LayerPinRecN = ly.layer(self.pinrec)
    LayerDevRecN = ly.layer(self.devrec)

    print("Waveguide_Straight2:")
    print(self.path)
    w = int(round(self.path.width/dbu))
#    print(self.path.width/dbu)    
    points = points_mult(path_to_Dpoints(self.path), 1/dbu)
#    print points
    path = points_to_path(points,w)
#    print path

    shapes(LayerSiN).insert(path.simple_polygon())

    angle = ( angle_segment([points[0],points[1]]) ) / 90
    
    # Pins on the bus waveguide side:
    pin_length = 200
    t = Trans(int(round(angle)), 0, Point(round(points[0][0]), round(points[0][1])))
#    t = Trans(Point(round(points[0][0]), round(points[0][1])))

#    Point(points[i][0], points[i][1])
    pin = pya.Path([Point(-pin_length/2, 0), Point(pin_length/2, 0)], w)
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin1", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    t = Trans(angle, 0, points[1][0], points[1][1])
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin2", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    # Create the device recognition layer -- make it 1 * wg_width away from the waveguides.
    path = points_to_path(points,w*3)
    shapes(LayerDevRecN).insert(path.simple_polygon())



class Bragg_waveguide(pya.PCellDeclarationHelper):
  """
  Input: length, width
  """

  def __init__(self):

    # Important: initialize the super class
    super(Bragg_waveguide, self).__init__()

    # declare the parameters
    self.param("number_of_periods", self.TypeInt, "Number of grating periods", default = 300)     
    self.param("grating_period", self.TypeDouble, "Grating period (microns)", default = 0.317)     
    self.param("corrugation_width", self.TypeDouble, "Corrugration width (microns)", default = 0.05)     
    self.param("misalignment", self.TypeDouble, "Grating misalignment (microns)", default = 0.0)     
    self.param("sinusoidal", self.TypeBoolean, "Grating Type (Rectangular=False, Sinusoidal=True)", default = False)     
#    self.param("wg_width", self.TypeDouble, "Waveguide width", default = 0.5)     
    self.param("layer", self.TypeLayer, "Layer", default = LayerInfo(31, 0))
    self.param("pinrec", self.TypeLayer, "PinRec Layer", default = LayerInfo(69, 0))
    self.param("devrec", self.TypeLayer, "DevRec Layer", default = LayerInfo(68, 0))
#    self.param("textl", self.TypeLayer, "Text Layer", default = LayerInfo(10, 0))

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Bragg_waveguide_%s-%.3f-%.3f-%.3f" % \
    (self.number_of_periods, self.grating_period, self.corrugation_width, self.misalignment)
  
  def coerce_parameters_impl(self):
    pass

  def can_create_from_shape(self, layout, shape, layer):
    return False
    
  def produce_impl(self):
  
    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes

    LayerSi = self.layer
    LayerSiN = ly.layer(LayerSi)
    LayerSiSPN = ly.layer(LayerSiSP)
    LayerPinRecN = ly.layer(self.pinrec)
    LayerDevRecN = ly.layer(self.devrec)

    # Draw the Bragg grating:
    box_width = int(round(self.grating_period/2/dbu))
    grating_period = int(round(self.grating_period/dbu))
    w = 500
    half_w = w/2
    half_corrugation_w = int(round(self.corrugation_width/2/dbu))
    misalignment = int(round(self.misalignment/dbu))
    if self.sinusoidal:
      npoints_sin = 40
      for i in range(0,self.number_of_periods):
        x = (round((i * self.grating_period)/dbu))
        box1 = Box(x, 0, x + box_width, half_w+half_corrugation_w)
        pts1 = [Point(x,0)]
        pts3 = [Point(x + misalignment,0)]
        for i1 in range(0,npoints_sin+1):
          x1 = i1 * 2* math.pi / npoints_sin
          y1 = round(half_corrugation_w*math.sin(x1))
          x1 = round(x1/2/math.pi*grating_period)
#          print("x: %s, y: %s" % (x1,y1))
          pts1.append( Point(x + x1,half_w+y1 ) )
          pts3.append( Point(x + misalignment + x1,-half_w-y1 ) )
        pts1.append( Point(x + grating_period, 0) )
        pts3.append( Point(x + grating_period + misalignment, 0) )
        shapes(LayerSiN).insert(Polygon(pts1))
        shapes(LayerSiN).insert(Polygon(pts3))
      length = x + grating_period + misalignment
      if misalignment &gt; 0:
        # extra piece at the end:
        box2 = Box(x + grating_period, 0, length, half_w)
        shapes(LayerSiN).insert(box2)
        # extra piece at the beginning:
        box3 = Box(0, 0, misalignment, -half_w)
        shapes(LayerSiN).insert(box3)

    else:
      for i in range(0,self.number_of_periods):
        x = int(round((i * self.grating_period)/dbu))
        box1 = Box(x, 0, x + box_width, half_w+half_corrugation_w)
        box2 = Box(x + box_width, 0, x + grating_period, half_w-half_corrugation_w)
        box3 = Box(x + misalignment, 0, x + box_width + misalignment, -half_w-half_corrugation_w)
        box4 = Box(x + box_width + misalignment, 0, x + grating_period + misalignment, -half_w+half_corrugation_w)
        shapes(LayerSiN).insert(box1)
        shapes(LayerSiN).insert(box2)
        shapes(LayerSiN).insert(box3)
        shapes(LayerSiN).insert(box4)
      length = x + grating_period + misalignment
      if misalignment &gt; 0:
        # extra piece at the end:
        box2 = Box(x + grating_period, 0, length, half_w)
        shapes(LayerSiN).insert(box2)
        # extra piece at the beginning:
        box3 = Box(0, 0, misalignment, -half_w)
        shapes(LayerSiN).insert(box3)

    
    # Pins on the waveguide:
    pin_length = 200

    t = Trans(0,0)
    pin = pya.Path([Point(-pin_length/2, 0), Point(pin_length/2, 0)], w)
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin1", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    t = Trans(length,0)
    pin_t = pin.transformed(t)
    shapes(LayerPinRecN).insert(pin_t)
    text = Text ("pin2", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    # Compact model information
    t = Trans(0, 0)
    text = Text ('Lumerical_INTERCONNECT_library=Design kits/ebeam_v1.2', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu
    t = Trans(length/10, 0)
    text = Text ('Lumerical_INTERCONNECT_component=ebeam_bragg_te1550', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu
    t = Trans(length/9, 0)
    text = Text \
      ('Spice_param:number_of_periods=%s grating_period=%.3fu corrugation_width=%.3fu misalignment=%.3fu sinusoidal=%s' %\
      (self.number_of_periods, self.grating_period, self.corrugation_width, self.misalignment, int(self.sinusoidal)), t )
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = 0.1/dbu

    # Create the device recognition layer -- make it 1 * wg_width away from the waveguides.
    points = [[0,0], [length, 0]]
    path = points_to_path(points,w)
    path = points_to_path(points,w*3)
    shapes(LayerDevRecN).insert(path.simple_polygon())





class ebeam_taper_te1550(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the strip waveguide taper.
  """

  def __init__(self):

    # Important: initialize the super class
    super(ebeam_taper_te1550, self).__init__()

    # declare the parameters
    self.param("silayer", self.TypeLayer, "Si Layer", default = LayerInfo(1, 0))
    self.param("wg_width1", self.TypeDouble, "Waveguide Width1 (CML only supports 0.4, 0.5, 0.6)", default = 0.5)
    self.param("wg_width2", self.TypeDouble, "Waveguide Width2 (CML only supports 1, 2, 3)", default = 3)
    self.param("wg_length", self.TypeDouble, "Waveguide Length (CML only supports a range of 1-10)", default = 10)
    self.param("pinrec", self.TypeLayer, "PinRec Layer", default = LayerInfo(69, 0))
    self.param("devrec", self.TypeLayer, "DevRec Layer", default = LayerInfo(68, 0))
    # hidden parameters, can be used to query this component:
    self.param("p1", self.TypeShape, "DPoint location of pin1", default = Point(-10000, 0), hidden = True, readonly = True)
    self.param("p2", self.TypeShape, "DPoint location of pin2", default = Point(0, 10000), hidden = True, readonly = True)
    

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "ebeam_taper_te1550(R=" + ('%.3f-%.3f-%.3f' % (self.wg_width1,self.wg_width2,self.wg_length) ) + ")"

  def can_create_from_shape_impl(self):
    return False


  def produce(self, layout, layers, parameters, cell):
    """
    coerce parameters (make consistent)
    """
    self._layers = layers
    self.cell = cell
    self._param_values = parameters
    self.layout = layout
    shapes = self.cell.shapes


    # cell: layout cell to place the layout
    # LayerSiN: which layer to use
    # w: waveguide width
    # length units in dbu

    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    
    LayerSi = self.silayer
    LayerSiN = self.silayer_layer
    LayerPinRecN = ly.layer(self.pinrec)
    LayerDevRecN = ly.layer(self.devrec)
    
    w1 = int(round(self.wg_width1/dbu))
    w2 = int(round(self.wg_width2/dbu))
    length = int(round(self.wg_length/dbu))

    pts = [Point(0,-w1/2), Point(0,w1/2), Point(length,w2/2), Point(length,-w2/2)]
    shapes(LayerSiN).insert(Polygon(pts))

    
    # Create the pins, as short paths:
    pin_length = 200 # database units, = 0.2 microns
    
    # Pin on the left side:
    p1 = [Point(pin_length/2,0), Point(-pin_length/2,0)]
    p1c = Point(0,0)
    self.set_p1 = p1c
    self.p1 = p1c
    pin = pya.Path(p1, w1)
    shapes(LayerPinRecN).insert(pin)
    t = Trans(0, 0)
    text = Text ("pin1", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    # Pin on the right side:
    p2 = [Point(length+pin_length/2,0), Point(length-pin_length/2,0)]
    p2c = Point(length, 0)
    self.set_p2 = p2c
    self.p2 = p2c
    pin = pya.Path(p2, w2)
    shapes(LayerPinRecN).insert(pin)
    t = Trans(length, 0)
    text = Text ("pin2", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu

    # Create the device recognition layer -- make it 1 * wg_width away from the waveguides.
    points = [[0,0], [length, 0]]
    path = points_to_path(points,w2+w1*2)
    shapes(LayerDevRecN).insert(path.simple_polygon())


    # Compact model information
    t = Trans(w1/10, 0)
    text = Text ("Lumerical_INTERCONNECT_library=Design kits/ebeam_v1.2", t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = length/100
    t = Trans(length/10, w1/4)
    text = Text ('Lumerical_INTERCONNECT_component=ebeam_taper_te1550', t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = length/100
    t = Trans(length/10, w1/2)
    text = Text ('Spice_param:wg_width1=%.3fu wg_width2=%.3fu wg_length=%.3fu'% (self.wg_width1,self.wg_width2,self.wg_length), t)
    shape = shapes(LayerDevRecN).insert(text)
    shape.text_size = length/100

    return "ebeam_taper_te1550(" + ('%.3f-%.3f-%.3f' % (self.wg_width1,self.wg_width2,self.wg_length) ) + ")"




class SiEPIC(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):

    print("Initializing SiEPIC PCells library.")
  
    # Set the description
    self.description = "SiEPIC General" 
    
    # Create the PCell declarations
#    self.layout().register_pcell("DirectionalCoupler_HalfRing_Straight", DirectionalCoupler_HalfRing_Straight())
#    self.layout().register_pcell("DirectionalCoupler_HalfRing_Arc", DirectionalCoupler_HalfRing_Arc())
#    self.layout().register_pcell("DoubleBus_Ring", DoubleBus_Ring())
#    self.layout().register_pcell("TestStruct_DoubleBus_Ring", TestStruct_DoubleBus_Ring())
#    self.layout().register_pcell("TestStruct_DoubleBus_Ring2", TestStruct_DoubleBus_Ring2())
    self.layout().register_pcell("LumericalINTERCONNECT_Laser", LumericalINTERCONNECT_Laser())
    self.layout().register_pcell("LumericalINTERCONNECT_Detector", LumericalINTERCONNECT_Detector())
#    self.layout().register_pcell("Waveguide_Bend", Waveguide_Bend())
#    self.layout().register_pcell("Waveguide_Route", Waveguide_Route())
#    self.layout().register_pcell("Waveguide_Route_simple", Waveguide_Route_simple())
#    self.layout().register_pcell("Waveguide_Straight", Waveguide_Straight())
#    self.layout().register_pcell("Bragg_waveguide", Bragg_waveguide())
#    self.layout().register_pcell("ebeam_taper_te1550", ebeam_taper_te1550())
#    self.layout().register_pcell("SWG_waveguide", SWG_waveguide())
#    self.layout().register_pcell("SWG_to_strip_waveguide", SWG_to_strip_waveguide())
#    self.layout().register_pcell("spiral", spiral())
#    self.layout().register_pcell("DirectionalCoupler_SeriesRings", DirectionalCoupler_SeriesRings())
#    self.layout().register_pcell("waveguide_bump", waveguide_bump())
    
    # Register us with the name "SiEPIC".
    # If a library with that name already existed, it will be replaced then.
    self.register("SiEPIC")
 
# Instantiate and register the library
SiEPIC()



</text>
</klayout-macro>
