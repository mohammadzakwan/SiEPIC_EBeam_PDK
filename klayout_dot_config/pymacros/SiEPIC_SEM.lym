<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SEM image list</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.verification_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># SiEPIC PDK
# script to find all SEM image requests in a layout
# by Lukas Chrostowski, 2017

import pya


def find_all_SEMs(cell, LayerSEMN):
  # function to traverse the entire layout hierarchy and find all the SEM geometries
  # returns list of ....
  
  # Find all the SEM shapes; identify the component it belongs; 
  print("Find all SEM image boxes and polygons")

  # Find all the SEM shapes
  iter1 = cell.begin_shapes_rec(LayerSEMN)
  i=0
  while not(iter1.at_end()):
    i+=1
    subcell = iter1.cell()             # cell (component) to which this shape belongs
    component = subcell.basic_name()   # name library component
    instance = subcell.name      
    subcell.name                # name of the cell; for PCells, different from basic_name
    found_component = False
    # SEM must be either a Box or a Polygon:
    if iter1.shape().is_box():
      box= iter1.shape().box.transformed(iter1.itrans())
      x, y = xy_mean_mult([[box.p1.x, box.p1.y], [box.p2.x, box.p2.y]],1)
      found_component = True
    if iter1.shape().is_polygon():
      polygon = iter1.shape().polygon.transformed(iter1.itrans())
      box = polygon.bbox
      x, y = xy_mean_mult([[box.p1.x, box.p1.y], [box.p2.x, box.p2.y]],1)
      found_component = True

    # A component was found. record the instance info  
    if found_component:

      # Find text label for SEM
      iter2 = subcell.begin_shapes_rec(LayerSEMN)
      SEMlabel = ""
      while not(iter2.at_end()):
        if iter2.shape().is_text():
          SEMlabel = iter2.shape().text.string
 #         print("%s: SEM label: %s" % (i, SEMlabel))
        iter2.next()

#      x = iter1.itrans().disp.x*dbu
#      y = iter1.itrans().disp.y*dbu
      flip = iter1.trans().is_mirror()
      rotate = (int(iter1.trans().rot())*90) % 360
      print("SEM image #%s: %s, %s, %s, %s, SEM label: %s, %s" % (i, x*dbu,y*dbu,component,instance,SEMlabel, subcell.display_title()) )

      
    # end if found_component   
     
    iter1.next()
 
  # end while iter1 
# end def find_all_SEMs




# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu
# Define layers based on PDK_functions:
LayerSEMN = ly.layer(LayerSEM)

find_all_SEMs(cell,LayerSEMN)





</text>
</klayout-macro>
