<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Delete extra top cells</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# delete_extra_top_cells

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file keeps the selected top cell, and gets rid of everything else.


Version history:

Lukas Chrostowski           2015/11/18
 - Initial version
 
"""

import pya


def delete_extra_top_cells(keep_cell):
  # delete all the extra top cells; keep "keep_cell"

  # Find the currently selected layout.
  ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
  if ly == None:
    raise Exception("No layout")

  # Check if the present cell is a top cell
  top_cells = ly.top_cells()
  count = 0
  
  if keep_cell in top_cells:
    print("deleting cells...")
    top_keep = keep_cell.cell_index()
    top_delete = []
    for top in ly.each_top_cell():
      if top == top_keep:
          print("keep top cell: " + str(ly.cell(top_keep).name))
      else:
          print("delete top cell: " + str(ly.cell(top).name))
          top_delete.append(top)
          count += 1
    print top_delete
    ly.delete_cells(top_delete)
  else:
    print("Nothing deleted.  Requires a top-cell as input.")

  if len(ly.top_cells()) &gt; 1:  # more cells to delete
    # recursively call this function to keep deleting.
    # this is required since deleting a top cell leaves behind the children as new top cells
    count =+ delete_extra_top_cells(keep_cell)

  return count

# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")

# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")

lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")


# Check if the present cell is a top cell
top_cells = ly.top_cells()
if cell in top_cells:
  # Record a transaction, to enable "undo"
  lv.transaction("Delete extra top cells")

  # Delete everything else
  count = delete_extra_top_cells(cell)

  lv.commit()

  v = pya.MessageBox.info("deleted top cells", "Deleted %s top cells." % count, pya.MessageBox.Ok)

else:
  v = pya.MessageBox.warning("No top cell selected", "No top cell selected.\nPlease select a top cell to keep\n(not a sub-cell).", pya.MessageBox.Ok)




</text>
</klayout-macro>
