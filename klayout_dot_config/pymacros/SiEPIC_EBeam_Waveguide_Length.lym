<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Measure Waveguide Length</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>Alt+Shift+W</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.waveguides_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2016

This Python file implements a waveguide resizing tool.

Version history:

Lukas Chrostowski 2016/04/17
 - initial version
 
 """

lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
if topcell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu

# Define layers based on PDK_functions:
LayerSiN = ly.layer(LayerSi)
LayerPinRecN = ly.layer(LayerPinRec)
LayerDevRecN = ly.layer(LayerDevRec)
LayerFbrTgtN = ly.layer(LayerFbrTgt)
LayerErrorN = ly.layer(LayerError)



# Find the selected objects
o_selection = lv.object_selection   # returns ObjectInstPath[].
if len(o_selection) != 1:
  v = pya.MessageBox.warning("No selection", "Select the waveguide (only one waveguide) you wish to measure.", pya.MessageBox.Ok)
  is_waveguide = False
else:
  o = o_selection[0]

  if o.is_cell_inst():
    print("Selected object is a cell.")
    oinst = o.inst()
    if oinst.is_pcell():
      c = oinst.cell
      if c.basic_name() in Waveguide_Types and c.pcell_parameters_by_name()['layer'] == LayerSi:
        print("%s on LayerSi." % c.basic_name() )
        is_waveguide = True
        trans = oinst.trans

  elif o.shape:
    print("Selected object is a shape.")
    c = o.shape.cell
    if c.basic_name() in Waveguide_Types and c.is_pcell_variant() and c.pcell_parameters_by_name()['layer'] == LayerSi:
      # we have a waveguide GUIDING_LAYER selected
      print("Selected object is a GUIDING_LAYER in %s on LayerSi." % c.basic_name() )
      trans = o.source_trans().s_trans()
      o_instpathlen = o.path_length()
      oinst = o.path_nth(o_instpathlen-1).inst()
      is_waveguide = True

# We now have a waveguide ROUND_PATH PCell, with variables: o (ObjectInstPath), oinst (Instance), c (Cell)
if is_waveguide == True:
  path_obj = c.pcell_parameters_by_name()['path']

  #  path_length
  wg_width = c.pcell_parameters_by_name()['path'].width  # in microns
  # calculate the length of the waveguide using the area / width
  iter2 = c.begin_shapes_rec(LayerSiN)
  if iter2.shape().is_polygon():
    area = iter2.shape().polygon.area()
    path_length = area / wg_width * dbu * dbu
  else:
    print("## ROUND_PATH waveguide, not polygon; bug in code? ##")
    path_length =  0  # or path_obj.length()


  v = pya.MessageBox.warning("Waveguie Length", "Waveguide length: %s" %path_length, pya.MessageBox.Ok)
</text>
</klayout-macro>
