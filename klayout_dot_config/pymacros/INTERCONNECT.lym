<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Launch Lumerical INTERCONNECT</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.simulation_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_functions

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file extract the circuit netlist from the physical layout, saves it to Spice file, 
and launches Lumerical INTERCONNECT for circuit simulations.

Version history:

Lukas Chrostowski           2015/11/19
 - initial version
 - generating a Spice netlist including Optical Network Analyzer; launch Lumerical INTERCONNECT simulation

Lukas Chrostowski           2016/06/11
 - save INTERCONNECT file.
  
"""

import os
print(os.name)

import platform
print(platform.system())
print(platform.release())

import sys
version = sys.version

import string

SIMULATION = 1    # Regular INTERCONNECT simulation

# find the currently selected cell:
topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
if topcell == None:
  raise Exception("No cell")
layout = topcell.layout()
dbu = layout.dbu

# initialize the arrays to keep track of layout objects
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []
layout_errors=[]

if 'wtext' in globals():
  # don't use the text window for output.
  del(wtext)

# Define layers based on the PDK:
LayerSiN = layout.layer(LayerSi)
LayerTextN = layout.layer(LayerText)
LayerPinRecN = layout.layer(LayerPinRec)
LayerDevRecN = layout.layer(LayerDevRec)
LayerFbrTgtN = layout.layer(LayerFbrTgt)
LayerErrorN = layout.layer(LayerError)
LayerINTERCONNECTN = layout.layer(LayerINTERCONNECT)


# extract the circuit netlist from the physical layout:
optical_waveguides, optical_components = netlist_extraction(topcell)[:2]

# Add the "disconnected" component to all disconnected pins
optical_waveguides, optical_components = \
  terminate_all_disconnected_pins(optical_pins, optical_waveguides, optical_components)
  
# Output the Spice netlist:
#text_Spice, num_detectors = generate_Spice_file(topcell, optical_waveguides, optical_components)
text_Spice, text_Spice_main, num_detectors = generate_short_spice_files(topcell, optical_waveguides, optical_components, optical_pins)
print(text_Spice)

if sys.platform.startswith("win"):
  folder_name = app.application_data_path()
  if not os.path.isdir(folder_name+'/tmp'):
    os.makedirs(folder_name+"/tmp")
  filename = folder_name + '/tmp/%s_main.spi' % topcell.name
  filename_matlab = folder_name + '/tmp/matlab/%s' % topcell.name
  filename_subckt = folder_name + '/tmp/%s.spi' % topcell.name
  filename2 = folder_name + '/tmp/%s.lsf' % topcell.name
  filename_icp = folder_name + '/tmp/%s.icp' % topcell.name
else: 
  filename = '/tmp/%s_main.spi' % topcell.name
  filename_subckt = '/tmp/%s.spi' % topcell.name
  filename2 = '/tmp/%s.lsf' % topcell.name
  filename_icp = '/tmp/%s.icp' % topcell.name

text_Spice_main += '.INCLUDE %s\n\n' % (filename_subckt)

# Write the Spice netlist to file
file = open(filename, 'w')
file.write (text_Spice_main)
file.close()
file = open(filename_subckt, 'w')
file.write (text_Spice)
file.close()

# Write the Lumerical INTERCONNECT start-up script.
file = open(filename2, 'w')
text_lsf = 'switchtolayout;\n'
text_lsf += 'deleteall;\n'
text_lsf += 'importnetlist("%s");\n' % filename
text_lsf += 'addproperty("::Root Element::%s", "MC_uniformity_thickness", "wafer", "Matrix");\n' % topcell.name
text_lsf += 'addproperty("::Root Element::%s", "MC_uniformity_width", "wafer", "Matrix");\n' % topcell.name
text_lsf += 'addproperty("::Root Element::%s", "MC_grid", "wafer", "Number");\n' % topcell.name 
text_lsf += 'addproperty("::Root Element::%s", "MC_resolution_x", "wafer", "Number");\n' % topcell.name
text_lsf += 'addproperty("::Root Element::%s", "MC_resolution_y", "wafer", "Number");\n' % topcell.name
text_lsf += 'addproperty("::Root Element::%s", "MC_non_uniform", "wafer", "Number");\n'  % topcell.name
text_lsf += 'select("::Root Element::%s");\n' % topcell.name
text_lsf += 'set("run setup script",2);\n'
text_lsf += 'save("%s");\n' % filename_icp
text_lsf += 'run;\n'
for i in range(0, num_detectors):
  text_lsf += 't%s = getresult("ONA_1", "input %s/mode 1/transmission");\n' % (i+1, i+1)
  text_lsf += 'g%s = getresult("ONA_1", "input %s/mode 1/gain");\n' % (i+1, i+1)
text_lsf += 'visualize(t1'
for i in range(1, num_detectors):
  text_lsf += ', t%s' % (i+1)
text_lsf += ');\n'
text_lsf += 'matlabsave("%s");\n' % filename_matlab

file.write (text_lsf)
file.close()

print(text_lsf)

if sys.platform.startswith('linux'):
  # Linux-specific code here...
  if string.find(version,"2.") &gt; -1:
    import commands
    print("Running INTERCONNECT")
    commands.getstatusoutput('/opt/lumerical/interconnect/bin/interconnect -run %s' % filename2)

elif sys.platform.startswith('darwin'):
  # OSX specific
  if string.find(version,"2.7.") &gt; -1:
    import commands
    print("Running INTERCONNECT")
    #commands.getstatusoutput('open /Applications/Lumerical/INTERCONNECT/INTERCONNECT.app --args %s' % filename)
    commands.getstatusoutput('open -n /Applications/Lumerical/INTERCONNECT/INTERCONNECT.app --args -run %s' % filename2)

elif sys.platform.startswith('win'):
  # Windows specific code here
  import subprocess
  print("Running INTERCONNECT")
  #check Interconnect installation directory
  file_path_a = 'C:\\Program Files\\Lumerical\\INTERCONNECT\\bin\\interconnect.exe'
  file_path_b = 'C:\\Program Files (x86)\\Lumerical\\INTERCONNECT\\bin\\interconnect.exe'
  
  if(os.path.isfile(file_path_a)==True):
    subprocess.Popen(args=[file_path_a, '-run', filename2], shell=True)
    
  elif(os.path.isfile(file_path_b)==True):
    subprocess.Popen(args=[file_path_b, '-run', filename2], shell=True)
  
  else:
    warning_window = pya.QMessageBox()
    warning_window.setText("Warning: The program could not find INTERCONNECT.")
    warning_window.setInformativeText("Do you want to specify it manually?")
    warning_window.setStandardButtons(pya.QMessageBox.Yes | pya.QMessageBox.Cancel);
    warning_window.setDefaultButton(pya.QMessageBox.Yes)
    response = warning_window.exec_()        
    if(response == pya.QMessageBox.Yes):
      dialog = pya.QFileDialog()
      path = str(dialog.getOpenFileName())
      path = path.replace('/', '\\')
      subprocess.Popen(args=[path, '-run', filename2], shell=True)
</text>
</klayout-macro>
