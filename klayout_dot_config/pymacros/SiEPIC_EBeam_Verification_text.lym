<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Verification and Netlist generation (text)</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>N</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.verification_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Verification

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements layout verification and netlist extraction
displays results in a text window


Version history:

Lukas Chrostowski 2015/11/11
 - Optical_net class
 - find all LayerSi paths and waveguides, and save optical net vertices 
 - find all PinRec paths
 - find all DevRec polygons and boxes
 - check_waveguides
   - waveguide bend minimum
   - paths with corners (more than 2 points)
   - bend radius less than specified
 - error marker layer and class; clear errors

Lukas Chrostowski 2015/11/12
 - determining where pins/waveguides overlap to generate a netlist
 - initial Spice output for components including waveguides and nets.
 - check nets &amp; components
   - incorrect number of nets connected to a component (disconnected, or too many)
 
Lukas Chrostowski           2015/11/15
 - fix for Python 3.4: print("xxx")
 - moved some functions from here, to the common "SiEPIC_EBeam_functions file, so they are accessible elsewhere.
 - added pin# text label on PinRec layer; sort pins in Spice output using these names.

Lukas Chrostowski           2015/11/16
 - fixes for component pin_type = Optical IO / FbrTgt being incorrectly handled; added Optical_pin.pin_type

Lukas Chrostowski           2015/11/17
 - debugging &amp; fixing Verification problems

Lukas Chrostowski           2015/11/18
 - removed need for numpy.array

Lukas Chrostowski           2015/11/19
 - moved some functions to SiEPIC_EBeam_functions

Lukas Chrostowski           2015/11/21
 - adding Results Database (rdb) and Marker Database Browser, for error viewing

Lukas Chrostowski           2016/06/11
 - minor fix for short spice file output

 
"""


def gen_ui():
  global wdg
  
  # If the window is already here, destroy it and start over again.
  if 'wdg' in globals():
    if wdg is not None and not wdg.destroyed():
      wdg.destroy()
  global wtext

  def button_clicked(checked):
    """ Event handler: "OK" button clicked """
    wdg.destroy()

  wdg = pya.QDialog(pya.Application.instance().main_window())

  wdg.setAttribute(pya.Qt.WA_DeleteOnClose)
  wdg.setWindowTitle("SiEPIC-EBeam-PDK Verification and Netlist Generation")

  wdg.resize(1200, 2500)
  wdg.move(1, 1)

  grid = pya.QGridLayout(wdg)

  windowlabel1 = pya.QLabel(wdg)
  windowlabel1.setText("Verification and Netlist extraction output:")
  wtext = pya.QTextEdit(wdg)
  wtext.enabled = True
  wtext.setText('')
  wtext.LineWrapMode = pya.QTextEdit.NoWrap

  ok = pya.QPushButton("OK", wdg)
  ok.clicked(button_clicked)   # attach the event handler
#  netlist = pya.QPushButton("Netlist Export", wdg) # not implemented

  grid.addWidget(windowlabel1, 0, 0, 1, 3)
  grid.addWidget(wtext, 1, 1, 3, 3)
#  grid.addWidget(netlist, 4, 2)
  grid.addWidget(ok, 4, 3)

  grid.setRowStretch(3, 1)
  grid.setColumnStretch(1, 1)

  wdg.show()



# ************************************************************************
# ************************************************************************
#  Main script:
# ************************************************************************
# ************************************************************************

#from time import strftime, clock
import time

# Create a GUI for the output:
gen_ui()

if 'wtext' in globals():
  wtext.insertHtml('Running SiEPIC-EBeam-PDK Verification and Netlist Generation.&lt;br&gt;')
  wtext.insertHtml('* KLayout SiEPIC_EBeam_PDK v%s, %s.&lt;br&gt;' % (SiEPIC_Version, time.strftime("%Y-%m-%d %H:%M:%S") ) )
clock_start = time.clock()


# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
layout = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if layout == None:
  raise Exception("No layout")
cv = pya.Application.instance().main_window().current_view().active_cellview()
# find the currently selected cell:
topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
if topcell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = layout.dbu


# Define layers based on PDK_functions:
LayerSiN = layout.layer(LayerSi)
LayerTextN = layout.layer(LayerText)
LayerPinRecN = layout.layer(LayerPinRec)
LayerDevRecN = layout.layer(LayerDevRec)
LayerFbrTgtN = layout.layer(LayerFbrTgt)
LayerErrorN = layout.layer(LayerError)
LayerINTERCONNECTN = layout.layer(LayerINTERCONNECT)

# Clear the previous errors:
clear_ErrorLayer(topcell, LayerErrorN)

# initialize the arrays to keep track of layout objects
reset_Optical_classes()
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []
layout_errors=[]

# Create a Results Database
rdb_i = lv.create_rdb("SiEPIC_Verification")
rdb = lv.rdb(rdb_i)
rdb.top_cell_name = topcell.name
rdb_cell = rdb.create_cell(topcell.name)


# Search the layout for the components and waveguides:
# Search the arrays to identify all the nets:
optical_waveguides, optical_components, clock_find_all_components, clock_find_all_waveguides, clock_identify_all_nets \
  = netlist_extraction(topcell)

clock_identify_layout = time.clock()


# ********* Verification ********* 
# Check the layout for errors, using the above arrays:
print("")
print("Checking layout for errors: ")
if 'wtext' in globals():
  wtext.insertHtml('&lt;br&gt;* Checking layout for errors:&lt;br&gt;&lt;br&gt;')
layout_errors=[]
# Check components - overlapping
check_components(rdb, topcell, LayerDevRecN)
clock_check_components = time.clock()
# Check waveguides for waveguide-specific problems:
check_waveguides(rdb, optical_waveguides, topcell, LayerErrorN)
clock_check_waveguides = time.clock()
# Check connectivity between components and waveguides:
check_connectivity(rdb, optical_components, topcell, LayerErrorN)
clock_check_connectivity = time.clock()
lv.add_missing_layers()
print("*** Number of errors found: %s." % len(layout_errors) )
if 'wtext' in globals():
  wtext.insertHtml('&lt;br&gt;*** Number of errors found: %s.&lt;br&gt;' % len(layout_errors) )
clock_verify_layout = time.clock()


# Output the Spice netlist:
text_subckt,text_Spice_main,_ = generate_Spice_file(topcell, optical_waveguides, optical_components, optical_pins)
if 'wtext' in globals():
  wtext.insertPlainText(text_Spice_main)
  wtext.insertPlainText(text_subckt)
clock_netlist = time.clock()


# Find the automated measurement coordinates:
if 'wtext' in globals():
  wtext.insertHtml('&lt;br&gt;* Automated measurement coordinates:&lt;br&gt;&lt;br&gt;')
print("")
print("Automated measurement coordinates: ")
print("")
t = find_automated_measurement_labels(topcell, LayerTextN)
if 'wtext' in globals():
  wtext.insertHtml (t)
clock_automated_measurements = time.clock()

if 'wtext' in globals():

  wtext.insertHtml('&lt;br&gt;CPU time for searching layout: find_all_components %s, find_all_waveguides %s&lt;br&gt;' \
  % (clock_find_all_components-clock_start, clock_find_all_waveguides-clock_find_all_components) )

  wtext.insertHtml('&lt;br&gt;CPU time for identify_all_nets %s&lt;br&gt;' \
  % (clock_identify_all_nets-clock_find_all_components) )

  wtext.insertHtml('&lt;br&gt;CPU time for verification: check_components %s, check_waveguides %s, check_connectivity %s&lt;br&gt;' \
  % (clock_check_components-clock_identify_all_nets, clock_check_waveguides-clock_check_components, clock_check_connectivity-clock_check_waveguides) )

  wtext.insertHtml('&lt;br&gt;CPU time for Spice netlist %s, automated measurements %s&lt;br&gt;' \
  % (clock_netlist-clock_verify_layout, clock_automated_measurements-clock_netlist) )

  wtext.insertHtml('&lt;br&gt;total CPU time: %s. &lt;br&gt;' % (time.clock() - clock_start) )


# Done
if 'wtext' in globals():
  wtext.insertHtml('&lt;br&gt;Done.&lt;br&gt;')
  
print("")
print("Done. ")
print("")


#lv.show_rdb(rdb_i, cv.cell_index)


</text>
</klayout-macro>
