<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Snap component using nearest pins</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>Shift+O</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.layout_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Snap_Component

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2016

This Python file implements snapping of one component to another. 

Usage:
- Click to select the component you wish to move
- Hover the mouse over the component you wish to align to
- Shift-O to run this script
- The script will find the closest pins between these components, and move the selected component

Version history:

Lukas Chrostowski           2016/03/08
 - Initial version

"""

# Configure variables to draw structures in the presently selected cell:
mw = pya.Application.instance().main_window()
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cv = pya.Application.instance().main_window().current_view().active_cellview()
topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
if topcell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu

# Define layers based on PDK_functions:
LayerSiN = ly.layer(LayerSi)
LayerPinRecN = ly.layer(LayerPinRec)
LayerDevRecN = ly.layer(LayerDevRec)
LayerFbrTgtN = ly.layer(LayerFbrTgt)
LayerErrorN = ly.layer(LayerError)

# initialize the arrays to keep track of layout objects
reset_Optical_classes()
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []
layout_errors = []

# Record a transaction, to enable "undo"
lv.transaction("Object snapping")
proceed = True

# extract the circuit netlist from the physical layout:
optical_waveguides, optical_components = netlist_extraction(topcell)[:2]

# we need two objects.  One is selected, and the other is a transient selection
if lv.has_transient_object_selection() == False:
  v = pya.MessageBox.warning("No transient selection", "Hover the mouse (transient selection) over the object to which you wish to snap to.\nEnsure transient selection is enabled in Settings - Applications - Selection.", pya.MessageBox.Ok)
else:
  # find the transient selection:
  o_transient_iter = lv.each_object_selected_transient()
  o_transient = next(o_transient_iter)  # returns ObjectInstPath[].

  # Find the selected objects
  o_selection = lv.object_selection   # returns ObjectInstPath[].
  if len(o_selection) &lt; 1:
    v = pya.MessageBox.warning("No selection", "Select the object you wish to be moved.", pya.MessageBox.Ok)
  else:
    o_selection = o_selection[0]

    if o_selection.inst().is_regular_array() | o_transient.inst().is_regular_array():
      v = pya.MessageBox.warning("Array", "Selection was an array. \nThe array was 'exploded' (Edit | Selection | Resolve Array). \nPlease select the objects and try again.", pya.MessageBox.Ok)
      o_transient.inst().explode()
      o_selection.inst().explode()
      proceed = False

    if proceed:
      if o_transient == o_selection:
        v = pya.MessageBox.warning("Same selection", "We need two different objects: one selected, and one transient (hover mouse over).", pya.MessageBox.Ok)
      else:
    
      # we have two instances:
#      print o_transient.inst()
#      print o_selection.inst()
      
        # find the instances in the optical_components database; use the x,y coordinates for identification
        x1 = o_transient.inst().trans.disp.x 
        y1 = o_transient.inst().trans.disp.y
        x2 = o_selection.inst().trans.disp.x
        y2 = o_selection.inst().trans.disp.y

        idx1 = -1
        idx2 = -1
        for o in optical_components:
#          print("optical_components compare: x: %s %s %s, y: %s %s %s" %(  int(round(o.x / dbu)), x1, x2, int(round(o.y / dbu)), y1, y2 )  ) 
          if int(round(o.x / dbu)) == x1 and int(round(o.y / dbu)) == y1:
            idx1 = o.idx
          if int(round(o.x / dbu)) == x2 and int(round(o.y / dbu)) == y2:
            idx2 = o.idx
        if idx1 &lt; 0 or idx2 &lt; 0:
          v = pya.MessageBox.warning("Optical components not found", "Optical components not found.\nNote: snapping only functions on components on the same hierarchy level (not on sub-cells).", pya.MessageBox.Ok)
        else:
          # we have two optical components.  Proceed with alignment
        
          # find the closest pins between the two objects; calculate the move/transform required
          dist = 1e100
          for p1 in optical_components[idx1].pins:
            for p2 in optical_components[idx2].pins:
              # check if both pins are type "1 = component"
              if optical_pins[p1].pin_type == 1 and  optical_pins[p2].pin_type == 1:
                # check if pins are in the same orientation
                angle_p1_p2 = angle_segments(optical_pins[p1].points,optical_pins[p2].points)
  #              print check_segments_same_direction( optical_pins[p1].points, optical_pins[p2].points )
                if angle_p1_p2 == 0 or abs(angle_p1_p2) == 180:
                  # find the closest ones
                  dx = optical_pins[p1].x - optical_pins[p2].x
                  dy = optical_pins[p1].y - optical_pins[p2].y
                  dist_comp = dx*dx + dy*dy
                  if dist &gt; dist_comp:
                    # save this dx/dy as the shortest distance transformation
                    dist = dist_comp
                    dx12 = dx
                    dy12 = dy        
#          print o_selection.inst().trans.disp.x
          if dist &lt; 1e100:
            # Move the selected object
            trans = pya.Trans(dx12,dy12)
            o_selection.inst().transform(trans)
          else:
            v = pya.MessageBox.warning("Snapping failed", "Snapping failed.  No matching pins found.", pya.MessageBox.Ok)

# Record a transaction, to enable "undo"
lv.commit()

</text>
</klayout-macro>
