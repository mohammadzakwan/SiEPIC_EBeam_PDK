<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Lumerical INTERCONNECT - WtW Monte Carlo simulations</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_functions

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file extract the circuit netlist from the physical layout, saves it to Spice file, 
and launches Lumerical INTERCONNECT for circuit simulations.

Version history:

Lukas Chrostowski           2015/11/19
 - initial version
 - generating a Spice netlist including Optical Network Analyzer; launch Lumerical INTERCONNECT simulation

Zeqin Lu                    2015/12/10
 - Wafer to Wafer Monte Carlo simulation
 
Jaspreet Jhoja              2016/03/18
 - Integrated the script with MC GUI
 - minor fixes for data parsing

Lukas Chrostowski           2016/04/19
 - Support for TM polarization in ONA gain

Jaspreet and Lukas           2016/05/01
 - Support for histograms of FSR, Gain and Wavelength

"""


def mc_wtw(topcell, layout, dbu, datadict):
  global LayerSiN, LayerTextN, LayerPinRecN, LayerDevRecN, LayerFbrTgtN, LayerErrorN, LayerINTERCONNECTN, optical_components, optical_waveguides, optical_pins, optical_nets
  #global topcell, layout
  
  #imported field data
  print(datadict)
  
  import os
  print(os.name)
  
  import platform
  print(platform.system())
  print(platform.release())
  
  import sys
  version = sys.version
  
  import string
  
  SIMULATION = 2    # Monte Carlo INTERCONNECT simulation
  
  INTERCONNECT_VISUALIZER = 1  # Plot the data using the Lumerical visualizer, or a regular plot?
  
  
  #The following section is commented out as the script imports the topcell and layout from the GUI
  # find the currently selected cell:
  #topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
  #if topcell == None:
  #  raise Exception("No cell")
  #layout = topcell.layout()
  #dbu = layout.dbu
  
  # initialize the arrays to keep track of layout objects
  optical_components = []
  optical_waveguides = []
  optical_pins = []
  optical_nets = []
  
  # Define layers based on the PDK:
  LayerSiN = layout.layer(LayerSi)
  LayerTextN = layout.layer(LayerText)
  LayerPinRecN = layout.layer(LayerPinRec)
  LayerDevRecN = layout.layer(LayerDevRec)
  LayerFbrTgtN = layout.layer(LayerFbrTgt)
  LayerErrorN = layout.layer(LayerError)
  LayerINTERCONNECTN = layout.layer(LayerINTERCONNECT)
  
  
  # extract the circuit netlist from the physical layout:
  optical_waveguides, optical_components = netlist_extraction(topcell)[:2]
    
  # Output the Spice netlist:
  text_Spice, text_Spice_main, num_detectors = generate_short_spice_files(topcell, optical_waveguides, optical_components, optical_pins)
  print(text_Spice)
  
  if sys.platform.startswith("win"):
  
    folder_name = app.application_data_path()
    if not os.path.isdir(folder_name+'/tmp'):
      os.makedirs(folder_name+"/tmp")
    filename = folder_name + '/tmp/%s_main.spi' % topcell.name
    filename_subckt = folder_name + '/tmp/%s.spi' % topcell.name
    filename2 = folder_name + '/tmp/%s.lsf' % topcell.name
  else: 
    filename = '/tmp/%s_main.spi' % topcell.name
    filename_subckt = '/tmp/%s.spi' % topcell.name
    filename2 = '/tmp/%s.lsf' % topcell.name
  
  text_Spice_main += '.INCLUDE %s\n\n' % (filename_subckt)

  # Write the Spice netlist to file
  file = open(filename, 'w')
  file.write (text_Spice_main)
  file.close()
  file = open(filename_subckt, 'w')
  file.write (text_Spice)
  file.close()

  
  # Write the Lumerical INTERCONNECT start-up script.
  file = open(filename2, 'w')
  text_lsf = '###DEVELOPER:Zeqin Lu, zqlu@ece.ubc.ca, University of British Columbia \n' 
  text_lsf += 'switchtolayout;\n'
  text_lsf += 'deleteall;\n'
  text_lsf += 'importnetlist("%s");\n' % filename
  text_lsf += 'addproperty("::Root Element", "seed", "wafer", "Number");  \n'
  text_lsf += 'addproperty("::Root Element::%s", "MC_uniformity_thickness", "wafer", "Matrix");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_uniformity_width", "wafer", "Matrix");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_grid", "wafer", "Number");\n' % topcell.name 
  text_lsf += 'addproperty("::Root Element::%s", "MC_resolution_x", "wafer", "Number");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_resolution_y", "wafer", "Number");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_non_uniform", "wafer", "Number");\n'  % topcell.name
  
  ############################## Wafer generation ###########################################
  #text_lsf += 'addproperty("::Root Element", "seed_process", "wafer", "Number");\n'
  #text_lsf += 'set("seed_process",1); \n'
  
  text_lsf += 'select("::Root Element");\n'
  text_lsf += 'set("setup script",'+ "'" +  ' \n'
  
  text_lsf += 'wafer_length = %s;  \n' % datadict["wafer_length_x"]  # [m], GUI INPUT: wafer length
  text_lsf += 'wafer_cl = %s;  \n' % datadict["within_wafer_correlation"]   # [m],  GUI INPUT: wafer correlation length
  text_lsf += 'wafer_clx = wafer_cl;  \n'  
  text_lsf += 'wafer_cly = wafer_cl; \n'   
  text_lsf += 'N = 500;  \n'        
  text_lsf += 'wafer_grid=wafer_length/N; \n'   
  text_lsf += 'wafer_RMS_w = %s;     \n' % datadict["within_wafer_width"]   # [nm],   GUI INPUT: Within wafer Sigma RMS for width
  text_lsf += 'wafer_RMS_t = %s;   \n' % datadict["within_wafer_thickness"]    # [nm],   GUI INPUT: Within wafer Sigma RMS for thickness
  text_lsf += 'x = linspace(-wafer_length/2,wafer_length/2,N); \n'
  text_lsf += 'y = x; \n'
  text_lsf += 'xx = meshgridx(x,y) ;  \n'
  text_lsf += 'yy = meshgridy(x,y) ;  \n'
  
  text_lsf += 'wafer_Z_thickness = wafer_RMS_t*randnmatrix(N,N);  \n'
  text_lsf += 'wafer_F_thickness = exp(-(abs(xx)/(wafer_clx/2)+abs(yy)/(wafer_cly/2))); \n' # exponential filter
  text_lsf += 'wafer_uniformity_thickness = real( 2*wafer_length/N/sqrt(wafer_clx*wafer_cly)*invfft(fft(wafer_Z_thickness,1,0)*fft(wafer_F_thickness,1,0), 1, 0)  );  \n' # wafer created using exponential filter
  #text_lsf += 'wafer_F_thickness = exp(-(xx^2/(wafer_clx^2/2)+yy^2/(wafer_cly^2/2))); \n'  # Gaussian filter
  #text_lsf += 'wafer_uniformity_thickness = real( 2/sqrt(pi)*wafer_length/N/sqrt(wafer_clx)/sqrt(wafer_cly)*invfft(fft(wafer_Z_thickness,1,0)*fft(wafer_F_thickness,1,0), 1, 0)  );    \n' # wafer created using Gaussian filter 
  
  text_lsf += 'wafer_Z_width = wafer_RMS_w*randnmatrix(N,N);  \n'
  text_lsf += 'wafer_F_width = wafer_F_thickness; \n' # exponential filter
  text_lsf += 'wafer_uniformity_width = real( 2*wafer_length/N/sqrt(wafer_clx*wafer_cly)*invfft(fft(wafer_Z_width,1,0)*fft(wafer_F_width,1,0), 1, 0)  );  \n' # wafer created using exponential filter
  #text_lsf += 'wafer_F_width = exp(-(xx^2/(wafer_clx^2/2)+yy^2/(wafer_cly^2/2))); \n'  # Gaussian filter
  #text_lsf += 'wafer_uniformity_width = real( 2/sqrt(pi)*wafer_length/N/sqrt(wafer_clx)/sqrt(wafer_cly)*invfft(fft(wafer_Z_width,1,0)*fft(wafer_F_width,1,0), 1, 0)  );    \n' # wafer created using Gaussian filter 
  
  ######################## adjust Wafer mean ###################
  text_lsf += 'mean_RMS_t = %s; # [nm]  \n' % datadict["wafer_sigma_thickness"]    # [nm],   GUI INPUT: wafer mean Sigma RMS for thickness
  text_lsf += 'mean_RMS_w = %s; # [nm]  \n' % datadict["wafer_sigma_width"]    # [nm],   GUI INPUT: wafer mean Sigma RMS for width
  text_lsf += 'wafer_uniformity_thickness = wafer_uniformity_thickness + randn(0,mean_RMS_t); \n'
  text_lsf += 'wafer_uniformity_width = wafer_uniformity_width + randn(0,mean_RMS_w); \n'
  
  
  ######################## high resolution interpolation ################
  text_lsf += 'MC_grid = 5e-6;  \n'   
  text_lsf += 'die_span_x = %s; \n' % datadict["die_length_x"]   # [m]    GUI INPUT: die length X
  text_lsf += 'die_span_y = %s; \n' % datadict["die_length_y"]  # [m]    GUI INPUT: die length Y
  text_lsf += 'MC_resolution_x = die_span_x/MC_grid;  \n'
  text_lsf += 'MC_resolution_y = die_span_y/MC_grid;  \n'
  text_lsf += 'x_die = linspace(-die_span_x/2, die_span_x/2, MC_resolution_x); \n'
  text_lsf += 'y_die = linspace(-die_span_y/2, die_span_y/2, MC_resolution_y); \n'
  text_lsf += 'die_xx = meshgridx(x_die,y_die) ;  \n'
  text_lsf += 'die_yy = meshgridy(x_die,y_die) ;  \n'
  text_lsf += 'MC_uniformity_thickness = interp(wafer_uniformity_thickness, x, y, x_die, y_die); # interpolation \n'
  text_lsf += 'MC_uniformity_width = interp(wafer_uniformity_width, x, y, x_die, y_die); # interpolation \n'
  
  if(datadict['within_die_width']=='' and datadict['within_die_thickness']=='' and datadict['within_die_correlation']==''):
    None
  else:
  ######################## add Within die variation (high frequency) ################
    text_lsf += 'die_cl = %s;  \n' % datadict["within_die_correlation"]  # [m], GUI INPUT: within die correlation length
    text_lsf += 'die_clx = die_cl;  \n'  
    text_lsf += 'die_cly = die_cl; \n'   
    text_lsf += 'die_RMS_w = %s;     \n' % datadict["within_die_width"]    # [nm], GUI INPUT: within die Sigma RMS for width
    text_lsf += 'die_RMS_t = %s;   \n' % datadict["within_die_thickness"]    # [nm], GUI INPUT: within die Sigma RMS for thickness
    text_lsf += 'die_Z_thickness = die_RMS_t*randnmatrix(MC_resolution_x,MC_resolution_y);  \n'
    text_lsf += 'die_F_thickness = exp(-(abs(die_xx)/(die_clx/2)+abs(die_yy)/(die_cly/2))); \n' # exponential filter
    text_lsf += 'die_uniformity_thickness = real( 2*die_span_x/N/sqrt(die_clx*die_cly)*invfft(fft(die_Z_thickness,1,0)*fft(die_F_thickness,1,0), 1, 0)  );  \n' # wafer created using exponential filter
    text_lsf += 'die_Z_width = die_RMS_w*randnmatrix(MC_resolution_x,MC_resolution_y);  \n'
    text_lsf += 'die_F_width = die_F_thickness; \n' # exponential filter
    text_lsf += 'die_uniformity_width = real( 2*die_span_x/N/sqrt(die_clx*die_cly)*invfft(fft(die_Z_width,1,0)*fft(die_F_width,1,0), 1, 0)  );  \n' # wafer created using exponential filter
    # Within wafer variation (low frequency) + within die variation (high frequency)
    text_lsf += 'MC_uniformity_thickness = MC_uniformity_thickness + die_uniformity_thickness;  \n'
    text_lsf += 'MC_uniformity_width = MC_uniformity_width + die_uniformity_width;  \n'
    
  
  #########################pass wafers to Root ####################
  text_lsf += 'select("::Root Element::%s");  \n' % topcell.name
  text_lsf += 'set("MC_uniformity_thickness",MC_uniformity_thickness);  \n'
  text_lsf += 'set("MC_uniformity_width",MC_uniformity_width);  \n'
  text_lsf += 'set("MC_resolution_x",MC_resolution_x);  \n'
  text_lsf += 'set("MC_resolution_y",MC_resolution_y);  \n'
  text_lsf += 'set("MC_grid",MC_grid);  \n'
  text_lsf += 'set("MC_non_uniform",1);  \n'
  text_lsf += "'"+'); \n'
  
  text_lsf += '#Run Monte Carlo simulations; \n'
  if INTERCONNECT_VISUALIZER:
    for i in range(0, num_detectors):
      text_lsf += 'mc%s = matrixdataset("mc%s"); # initialize visualizer data, mc%s \n' % (i+1, i+1, i+1)
  text_lsf += 'seed=randreset; \n'
  text_lsf += 'N_total = %s;  \n' % datadict["number_of_simulations"]    #  GUI INPUT: number of simulations
  
  ###Define histograms datasets
  if(datadict["hist_fsr"]==True):
    text_lsf += 'fsr_dataset = matrix(1,N_total,1);\n'
  if(datadict["hist_wavelength"]==True):
    text_lsf += 'freq_dataset = matrix(1,N_total,1);\n'
  if(datadict["hist_gain"]==True):
    text_lsf += 'gain_dataset = matrix(1,N_total,1);\n'
   
  ##Start simulation loop
  text_lsf += 'for (simu=1;simu&lt;=N_total;simu=simu+1) {   \n'
  text_lsf += '  switchtodesign; \n'
  text_lsf += '  setnamed("ONA_1","peak analysis", "single");\n'

  text_lsf += '  select("::Root Element");  \n'
  text_lsf += '  seed=seed+1; \n'
  text_lsf += '  set("seed",seed);  \n'
  text_lsf += '  run;\n'
  
  text_lsf += '  select("ONA_1");\n'
  text_lsf += '  f_start = get("start frequency");\n'
  text_lsf += '  f_stop = get("stop frequency");\n'
  text_lsf += '  num_points = get("number of points");\n'
  text_lsf += '  wavelength = c/f_start : (c/f_stop-c/f_start)/(num_points-1) : c/f_stop;\n'
  
  if INTERCONNECT_VISUALIZER:
    for i in range(0, num_detectors):
      text_lsf += '  if (simu==1) { mc%s.addparameter("wavelength",wavelength);} \n' % (i+1) 
      text_lsf += '  mc%s.addattribute("run", getattribute( getresult("ONA_1", "input %s/mode 1/gain"), getattribute(getresult("ONA_1", "input %s/mode 1/gain")) ) );\n' % (i+1, i+1, i+1)
  else:
    text_lsf += '  gain = getattribute( getresult("ONA_1","input 1/mode 1/gain"), getattribute(getresult("ONA_1", "input %s/mode 1/gain")) );\n' %( i+1)
    text_lsf += '  plot(wavelength,gain);\n'
    text_lsf += '  holdon;\n'
    
#add simulation data to their corresponding datalists  
  if(datadict["hist_fsr"]==True):
      text_lsf += 'fsr_select = getresult("ONA_1", "input 1/mode 1/peak/free spectral range");\n'
      text_lsf += 'fsr_dataset(1,simu) = real(fsr_select.getattribute("TE free spectral range (m)"));\n'

  if(datadict["hist_wavelength"]==True):
      text_lsf += 'freq_dataset(1,simu) = getresult("ONA_1", "input 1/mode 1/peak/frequency");\n'

  if(datadict["hist_gain"]==True):
      text_lsf += 'gain_select = getresult("ONA_1", "input 1/mode 1/peak/gain");\n'
      text_lsf += 'gain_dataset(1,simu) = real(gain_select.getattribute("TE gain (dB)"));\n'

##################
  
  text_lsf += '}\n'
  if INTERCONNECT_VISUALIZER:
    for i in range(0, num_detectors):
      text_lsf += 'visualize(mc%s);\n' % (i+1)

histc(dataset, bin_hist, "Free Spectral Range (nm)", "Count", "Histogram - FSR");
#out = plotxy(histc_data(1:length(histc_data)/2,1),histc_data(1:length(histc_data)/2,2), "Free Spectral Range (nm)", "Count", "Histogram - FSR");
legend("Mean: " + num2str(mean(dataset)) + ", Std Dev: " + num2str(std(dataset)));


#### Display Histograms for the selected components
#FSR
  if(datadict["hist_fsr"]==True):
      text_lsf += 'dataset = fsr_dataset*1e9;\n'  #select fsr dataset defined above
      text_lsf += 'bin_hist = max( [ 10, (max(dataset)-min(dataset)) / std(dataset) * 10 ]);\n' #define number of bins according to the number of data
      text_lsf += 'histc(dataset, bin_hist, "Free Spectral Range (nm)", "Count", "Histogram - FSR");\n' #generate histogram 
      text_lsf += 'legend("Mean: " + num2str(mean(dataset)) + ", Std Dev: " + num2str(std(dataset)));\n' #define plot legends
      
#wavelength
  if(datadict["hist_wavelength"]==True):
      text_lsf += 'dataset = freq_dataset*1e9;\n'
      text_lsf += 'num_hist = max( [ 10, (max(dataset)-min(dataset)) / std(dataset) * 10 ]);\n'
      text_lsf += 'histc(dataset, bin_hist, "Wavelength (nm)", "Count", "Histogram - Peak wavelength");\n'
      text_lsf += 'legend("Mean: " + num2str(mean(dataset)) + ", Std Dev: " + num2str(std(dataset)));\n'

#Gain
  if(datadict["hist_gain"]==True):
      text_lsf += 'dataset = gain_dataset;\n'
      text_lsf += 'num_hist = max( [ 10, (max(dataset)-min(dataset)) / std(dataset) * 10 ]);\n'
      text_lsf += 'histc(dataset, bin_hist, "Gain (dB)", "Count", "Histogram - Peak gain");\n'
      text_lsf += 'legend("Mean: " + num2str(mean(dataset)) + ", Std Dev: " + num2str(std(dataset)));\n'
 
  file.write (text_lsf)
  file.close()
  
  print(text_lsf)
  
  if sys.platform.startswith('linux'):
    # Linux-specific code here...
    if string.find(version,"2.") &gt; -1:
      import commands
      print("Running INTERCONNECT")
      commands.getstatusoutput('/opt/lumerical/interconnect/bin/interconnect -run %s' % filename2)
  
  elif sys.platform.startswith('darwin'):
    # OSX specific
    if string.find(version,"2.7.") &gt; -1:
      import commands
      print("Running INTERCONNECT")
      #commands.getstatusoutput('open /Applications/Lumerical/INTERCONNECT/INTERCONNECT.app --args %s' % filename)
      commands.getstatusoutput('open -n /Applications/Lumerical/INTERCONNECT/INTERCONNECT.app --args -run %s' % filename2)
  
  elif sys.platform.startswith('win'):
    # Windows specific code here
    import subprocess
    print("Running INTERCONNECT")
    
    #check Interconnect installation directory
    file_path_a = 'C:\\Program Files\\Lumerical\\INTERCONNECT\\bin\\interconnect.exe'
    file_path_b = 'C:\\Program Files (x86)\\Lumerical\\INTERCONNECT\\bin\\interconnect.exe'
  
    if(os.path.isfile(file_path_a)==True):
      subprocess.Popen(args=[file_path_a, '-run', filename2], shell=True)
    
    elif(os.path.isfile(file_path_b)==True):
      subprocess.Popen(args=[file_path_b, '-run', filename2], shell=True)
  
    else:
      warning_window = pya.QMessageBox()
      warning_window.setText("Warning: The program could not find INTERCONNECT.")
      warning_window.setInformativeText("Do you want to specify it manually?")
      warning_window.setStandardButtons(pya.QMessageBox.Yes | pya.QMessageBox.Cancel);
      warning_window.setDefaultButton(pya.QMessageBox.Yes)
      response = warning_window.exec_()        
      if(response == pya.QMessageBox.Yes):
        dialog = pya.QFileDialog()
        path = str(dialog.getOpenFileName())
        path = path.replace('/', '\\')
        subprocess.Popen(args=[path, '-run', filename2], shell=True)
</text>
</klayout-macro>
